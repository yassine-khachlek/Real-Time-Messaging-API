#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config()

process.env.NODE_ENV = process.env.NODE_ENV === 'test' ? 'test' : process.env.APP_ENV

const app = require('../app');
const debug = require('debug')('express-js:server');
const http = require('http');
const jwt = require('jsonwebtoken')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.APP_PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/* Create socket.io server */
var io = require('socket.io')(server);

app.set('io', io);

io.use(function(socket, next){
  if (socket.handshake.query && socket.handshake.query.token){
    jwt.verify(socket.handshake.query.token, process.env.JWT_KEY, function(err, decoded) {
      socket.decoded = decoded;
      next();
    });
  } else {
    next();
  }
})

io.on('connection', function(socket){

  if (! socket.decoded || ! socket.decoded._id){

    socket.emit('event', {
      name: 'authenticate',
      status: 'unauthorized'
    })

    socket.disconnect()
  }

  socket.join(socket.decoded._id);

  socket.emit('event', {
    name: 'authenticate',
    status: 'authorized',
    data: {
      user: socket.decoded
    }
  })

  socket.on('disconnect', function(){
    socket.leave(socket.decoded._id);
    //console.log('WebSocket disconnection ' + socket.id);
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
server.setTimeout(5000);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = server